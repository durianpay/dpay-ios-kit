// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DpaySDK
import DeveloperToolsSupport
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc(DCheckoutOptions) public class DCheckoutOptions : ObjectiveC.NSObject {
  @objc public var themeColor: Swift.String?
  @objc public var accentColor: Swift.String?
  public var locale: Swift.String?
  public var environment: Swift.String?
  public var accessToken: Swift.String?
  public var siteName: Swift.String?
  public var amount: Swift.String?
  public var currency: Swift.String?
  public var orderId: Swift.String?
  public var paymentType: Swift.String?
  public var customerId: Swift.String?
  public var customerEmail: Swift.String?
  public var customerGivenName: Swift.String?
  public var customerMobile: Swift.String?
  public var customerAddressLine1: Swift.String?
  public var customerAddressLine2: Swift.String?
  public var customerCity: Swift.String?
  public var customerRegion: Swift.String?
  public var customerCountry: Swift.String?
  public var customerPostalCode: Swift.String?
  public var label: Swift.String?
  public var receiverName: Swift.String?
  public var receiverPhone: Swift.String?
  public var landmark: Swift.String?
  public var sdkSource: Swift.String?
  public var delayMs: Swift.String?
  public var forceFail: Swift.String?
  public var darkMode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class DPaymentFailed : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var response: DpaySDK.Response!
  public var type: Swift.String!
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class DPaymentSuccess : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  public var response: DpaySDK.Response!
  public var type: Swift.String!
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DpaySDK : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static let getInstance: DpaySDK.DpaySDK
  @_Concurrency.MainActor(unsafe) public func checkout(options: Swift.Dictionary<Swift.String, Any>, listener: any DpaySDK.DpayCheckoutProtocol)
  @_Concurrency.MainActor(unsafe) public func checkout(options: DpaySDK.DCheckoutOptions, listener: any DpaySDK.DpayCheckoutProtocol)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol DpayCheckoutProtocol {
  func onSuccess(transactionResponse: DpaySDK.DPaymentSuccess)
  func onFailure(transactionResponse: DpaySDK.DPaymentFailed)
  func onClose(transactionResponse: Swift.String)
}
@_hasMissingDesignatedInitializers @objc public class Response : ObjectiveC.NSObject, Foundation.NSCoding, Swift.Codable {
  @objc public var amount: Swift.String!
  @objc public var currency: Swift.String!
  @objc public var msg: Swift.String!
  @objc public var orderId: Swift.String!
  @objc public var paymentId: Swift.String!
  @objc public var paymentMethodUsed: Swift.String!
  public var success: Swift.Bool!
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
